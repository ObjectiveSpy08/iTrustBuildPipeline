---
  - import_tasks: install.yml

  - name: Read Admin password
    shell: cat /var/lib/jenkins/secrets/initialAdminPassword
    register: admin_password
    become: true

  - name: unlock and add admin user
    jenkins_script:
      script: |
        import jenkins.model.*
        import hudson.security.*
        def instance = Jenkins.getInstance()
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        def users = hudsonRealm.getAllUsers()
        users_s = users.collect { it.toString() }
        if ("jenkins" in users_s) {
            println "Admin user already exists"
        } else {
          hudsonRealm.createAccount('jenkins', '${user_password}')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)
          instance.save()
        }
      args:
        user_password: "{{ user_password }}"
      user: admin
      password: "{{ admin_password.stdout }}"

  - name: complete setup wizard
    jenkins_script:
     script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      }
     user: admin
     password: "{{ admin_password.stdout }}"

  - name: Install Jenkins plugins
    jenkins_plugin:
      jenkins_home: "/var/lib/jenkins"
      name: "{{ item }}"
      url_username: "jenkins"
      url_password: "{{ user_password }}"
    with_items:
      - git
      - nodeJS
      - pipeline-npm-integration
    register: plugin_result
    until: plugin_result is success
    retries: 3
    delay: 2

  - name : Restart Jenkins service
    service: 
      name: jenkins
      state: restarted  
    become: yes

  - name : Wait for the the jenkins service to start
    wait_for:
      port: 8080
      delay: 45    

  
